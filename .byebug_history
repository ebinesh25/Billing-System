c
      @added_denominations = JSON.parse(token_as_array[0].gsub('=>', ':'))
token_as_array[1]
token_as_array[0]
c
}c
end
                         end
                           denominations[denom].to_i - given_count
                         else
                           denominations[denom].to_i + given_count
  denominations[denom] = if operation == :add
  customer_amount -= given_count * denom
  given_count = [count.to_i, needed_count].min
  next unless count.to_i.positive?
  needed_count = customer_amount.div(denom)
denominations.each do |denom, count|
denominations = denominations.transform_keys(&:to_i)
customer_amount = 10000
operation = :add
denominations = {"2000"=>246, "500"=>242, "200"=>244, "100"=>58, "50"=>184, "10"=>2598, "20"=>2438, "5"=>18422, "2"=>586, "1"=>586}
denoms = proc {
 JSON.parse(token_as_array[0]).with_indifferent_access
JSON.parse(token_as_array[0])
token_as_array[0].with_indifferent_access.keys
JSON.parse(token_as_array[0])
c
 @missed_attributes
c
@new_missed_attributes= 1 unless @bill_product.save
    @bill_product = @bill.bill_products.build( product_id: attributes[:product_id],quantity: attributes[:quantity])
        quantity: attributes[:quantity]
        product_id: attributes[:product_id],
    @bill_product = @bill.bill_products.build( product_id: attributes[:product_id],quantity: attributes[:quantity])
quantity = 2
product_id = "Tab_81952"
@missed_attributes
@missed_attributes.nil?
@new_missed_attributes += 1 unless @bill_product.save
@missed_attributes.nil?
@missed_attributes = 
@all_saved
c
n
c
@remaining_denominations
c
n
@remaining_denominations
c
f @bill.balance_amount > 0i
if @bill.balance_amount > 0 end
c
@bill.balance_amount
@bill.customer_amount
c
@remaining_denominations = remaining_denominations(@added_denominations, @bill.customer_amount,:sub)
@bill.customer_amount
@added_denominations
c
self
n
c
n
c
n
self
purchased_price
n
purchased_price
n
purchased_price
c
n
self
n
c
self
up.save
up = self.update(purchased_price: 50)
self
up = self.update(purchased_price: 50)
self
n
c
exit
c
cc
c
nc
n
cn
c
self.update(purchased_price: 2000)
self
n
exit
n
c
reload!
c
purchased_price
n
quantity * 10
purchased_price
c
denominations.each do |denom, count| puts "#{denom} => #{count}" end
denominations = bill_params["denominations"].transform_keys(&:to_i)
bill_params["denominations"].transform_keys(&:to_i)
bill_params["denominations"]
bill_params["denominations]
denom["denominations"].transform_keys(&:to_i)
denom["denominations"]
denom["denominations"].is_a?Hash
denom = bill_params.slice(:denominations)
bill_params["denominations"]["denominations"]
bill_params["denominations"].is_a?Object
bill_params["denominations"].is_a?Hash
bill_params.slice(:denominations).is_a?Object
bill_params.slice(:denominations).is_a?Hash
bill_params["denominations"]
bill_params.slice(:denominations, :denominations)
bill_params.slice(:denominations)
params.slice(:denominations)
c
 c
denominations[1]
 (0..(denominations.length - 2)).step(2).each do |index| puts index end
denominations
c
@calculated_for_user_prices
@calcualted_for_user_prices
c
@calculate_price_for_user
c
@calculate_price_for_user.each do |message, amount| puts "#{message} : #{amount}" end
@calculate_price_for_user
c
@calculate_price_for_user
c
@calculate_price_for_user
c
denominations.each do |rupee, count| "#{rupee}  : #{count}" end
denominations.each do |rupee, count| rupee + " : " +count end
c
@remaining_denominations
@token
token
c
token_as_array
c
hash_denom = JSON.parse(@json_denom)
@json_denom.to_hash
@json_denom
@json_denom = @remaining_denominations.to_json
@remaining_denominations.to_json
@remaining_denominations
c
@token
c
@remaining_denominations
c
remaining_denominations(denominations)
denominations = bill_params.slice(:denominations)
bill_params.slice(:denominations)
bill_params
remaining_denominations(bill_params.slice(:denominations))
remaining_denominations
@remaining_denomination
c
<<<<<<< HEAD
 @remaining_denomination = remaining_denominations(@denominations)
remaining_denominations(@denominations)
@remaining_denominations
c
@denominations.each do |_, denoms| puts "#{_}=>#{denoms}" end
@denominations
c
bill_params[:denominations]
bill_params
@denominations
=> 47:     @denominations = bill_params[:denominations]
@deominations
c
=======
>>>>>>> d142b9a1b851664b2065b76b141f59c8433c77e7
denominations.each do |rupee, count| puts "#{rupee} => #{count}" end
denominations
c
bp[0]['quantity']
bp[0]['product_id']
bp[0][:product_id]
bp[0]
bp
bp["product_id"]
bp[product_id]
c
bp["product_id"]
bp[:product_id]
bp
